{"version":3,"sources":["Components/SadSearch.js","Components/ImagesList.js","Components/TypeWriter.js","Components/Search.js","actions/actions.js","Components/Loading.js","Components/QueriesList.js","App.js","serviceWorker.js","reducers/rootReducer.js","index.js"],"names":["UncontrolledLottie","defaultOptions","loop","autoplay","animationData","rendererSettings","preserveAspectRatio","className","options","height","width","React","Component","Images","props","foundImages","length","SadSearch","map","item","key","id","src","urls","small","alt","likes","href","links","html","rel","target","typewriterText","TypeWriter","state","current","changeText","setTimeout","index","indexOf","newIndex","setState","this","SearchBar","searchText","handleChange","e","value","handleSubmit","preventDefault","reset","search","handleSaveQuery","addQuery","onSubmit","type","onChange","placeholder","onFocus","onBlur","minLength","required","onClick","connect","dispatch","title","QueriesList","handleClickQueries","queries","searchQueries","handleClick","deleteQuery","queryText","payload","apiKey","process","App","onSearchSubmit","fetch","page","then","res","json","response","images","concat","results","loading","totalPages","total_pages","error","console","log","increasePageNumber","message","Loading","dataLength","next","hasMore","loader","Search","Boolean","window","location","hostname","match","initState","rootReducer","action","filter","query","store","createStore","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch"],"mappings":"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","file":"static/js/main.f499ff61.chunk.js","sourcesContent":["import React from \"react\";\r\nimport Lottie from 'react-lottie';\r\nimport animationData from '../looties/6638-not-found.json'\r\n \r\nclass UncontrolledLottie extends React.Component {\r\n    render(){\r\n      const defaultOptions = {\r\n        loop: true,\r\n        autoplay: true,\r\n        animationData: animationData,\r\n        rendererSettings: {\r\n          preserveAspectRatio: 'xMidYMid slice'\r\n        }\r\n      };\r\n  \r\n      return(\r\n        <div className=\"sadsearch\">\r\n          <h2>Sorry, there are no images with this search &#128542;</h2>\r\n          <Lottie options={defaultOptions}\r\n                height={200}\r\n                width={200}\r\n          />\r\n        </div>\r\n      )\r\n    }\r\n  }\r\n  \r\n  export default UncontrolledLottie","import React from \"react\";\r\nimport SadSearch from \"./SadSearch\";\r\n\r\nexport default function Images(props) {\r\n  return props.foundImages.length < 1 ? (\r\n    <div>\r\n      <SadSearch />\r\n    </div>\r\n  ) : (\r\n    <div className=\"masonry\">\r\n      {props.foundImages.map((item) => (\r\n        <div key={item.id} className=\"masonry-item\">\r\n          <img src={item.urls.small} alt=\"\" />\r\n          <div className=\"overlay\">\r\n            <div className=\"content\">\r\n              <p>\r\n                {item.likes} <i className=\"fas fa-heart fa-sm\"></i>\r\n              </p>\r\n              <a\r\n                href={item.links.html}\r\n                rel=\"noopener noreferrer\"\r\n                target=\"_blank\"\r\n              >\r\n                Visit page <i className=\"fas fa-external-link-alt\"></i>\r\n              </a>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nconst typewriterText = [\"mediapark\", \"career\", \"employ\", \"cats\"];\r\n\r\nclass TypeWriter extends React.Component {\r\n  state = { current: typewriterText[0] };\r\n\r\n  changeText = () => {\r\n    setTimeout(() => {\r\n      let index = typewriterText.indexOf(this.state.current);\r\n      let newIndex = typewriterText.length > index + 1 ? index + 1 : 0;\r\n      this.setState({ current: typewriterText[newIndex] }, () => {\r\n        this.changeText();\r\n      });\r\n    }, 5000);\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.changeText();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h1>\r\n          Browse for: #<span className=\"typewriter\">{this.state.current}</span>\r\n        </h1>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default TypeWriter;\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { addQuery } from \"../actions/actions\";\r\nimport TypeWriter from \"./TypeWriter\";\r\n\r\nclass SearchBar extends React.Component {\r\n  state = { searchText: \"\"};\r\n\r\n  handleChange = (e) => {\r\n    this.setState({ searchText: e.target.value });\r\n  };\r\n\r\n  handleSubmit = (e) => {\r\n    e.preventDefault(); //prevents from refresh\r\n    this.props.reset();\r\n    this.props.search(this.state.searchText);\r\n  };\r\n\r\n  //save query to Queries List\r\n  handleSaveQuery = (e) => {\r\n    this.props.addQuery(this.state.searchText);\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"search-container\">\r\n        <TypeWriter />\r\n        <div className=\"search\">\r\n          <form onSubmit={this.handleSubmit} className=\"search-bar\">\r\n            <input\r\n              type=\"text\"\r\n              onChange={this.handleChange}\r\n              placeholder=\"Search for photos...\"\r\n              onFocus={(e) => (e.target.placeholder = \"\")}\r\n              onBlur={(e) => (e.target.placeholder = \"Search for photos...\")}\r\n              minLength=\"3\"\r\n              required\r\n            />\r\n            <button type=\"submit\">\r\n              <i className=\"fas fa-search fa-lg\"></i>\r\n            </button>\r\n          </form>\r\n          <button onClick={this.handleSaveQuery} className=\"search-save\">\r\n            Save Search\r\n          </button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n//Add queries to rootReducer\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    addQuery: (title) => {\r\n      dispatch(addQuery(title));\r\n    },\r\n  };\r\n};\r\n\r\nexport default connect(null, mapDispatchToProps)(SearchBar);\r\n","export const ADD_QUERY = \"ADD_QUERY\";\r\nexport const DELETE_QUERY = \"DELETE_QUERY\";\r\n\r\nexport const deleteQuery = (queryText) => {\r\n  return {\r\n    type: \"DELETE_QUERY\",\r\n    payload: queryText\r\n  };\r\n};\r\n\r\nexport const addQuery = (title) => {\r\n  return {\r\n    type: \"ADD_QUERY\",\r\n    title\r\n  };\r\n};\r\n","import React from \"react\";\r\nimport Lottie from 'react-lottie';\r\nimport animationData from '../looties/890-loading-animation.json'\r\n\r\nclass UncontrolledLottie extends React.Component {\r\n    render(){\r\n      const defaultOptions = {\r\n        loop: true,\r\n        autoplay: true,\r\n        animationData: animationData,\r\n        rendererSettings: {\r\n          preserveAspectRatio: 'xMidYMid slice'\r\n        }\r\n      };\r\n\r\n      return(\r\n        <div>\r\n          <Lottie options={defaultOptions}\r\n                height={200}\r\n                width={200}\r\n          />\r\n        </div>\r\n      )\r\n    }\r\n  }\r\n\r\n  export default UncontrolledLottie\r\n\r\n// export default function Loader() {\r\n//   return (\r\n//     <div className=\"loading\">\r\n//       <div className=\"dot\"></div>\r\n//       <div className=\"dot\"></div>\r\n//       <div className=\"dot\"></div>\r\n//       <div className=\"dot\"></div>\r\n//       <div className=\"dot\"></div>\r\n//     </div>\r\n//   );\r\n// }\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { deleteQuery } from \"../actions/actions\";\r\n\r\nclass QueriesList extends React.Component {\r\n  //sending query text to App.js\r\n  handleClickQueries = (queries) => {\r\n    const searchQueries = queries;\r\n    this.props.reset();\r\n    this.props.searchQueries(searchQueries);\r\n  };\r\n\r\n  //delete query from list\r\n  handleClick = (title) => {\r\n    this.props.deleteQuery(title);\r\n  };\r\n\r\n  render() {\r\n    const { queries } = this.props;\r\n    return (\r\n      <div className=\"queries\">\r\n        {queries.map((item) => (\r\n          <div key={item.title} className=\"query\">\r\n            <button\r\n              onClick={() => {\r\n                this.handleClickQueries(item.title);\r\n              }}\r\n            >\r\n              #{item.title}\r\n            </button>\r\n            <button\r\n              onClick={() => this.handleClick(item.title)}\r\n              className=\"delete\"\r\n            >\r\n              <i className=\"fas fa-times\"></i>\r\n            </button>\r\n          </div>\r\n        ))}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n//maping queries props from rootReducer.js\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    queries: state.queries,\r\n  };\r\n};\r\n\r\n//delete query props from rootReducer.js\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    deleteQuery: (queryText) => {\r\n      dispatch(deleteQuery(queryText));\r\n    },\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(QueriesList);\r\n","import React from \"react\";\nimport ImagesList from \"./Components/ImagesList\";\nimport Search from \"./Components/Search\";\nimport Loading from \"./Components/Loading\";\nimport QueriesList from \"./Components/QueriesList\";\nimport InfiniteScroll from \"react-infinite-scroll-component\";\n\nimport \"./styles/style.css\";\n\nconst apiKey = `${process.env.REACT_APP_API_KEY}`;\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      error: null,\n      loading: true,\n      images: [],\n      page: 1,\n      totalPages: 1,\n      searchText: \"lithuania\",\n    };\n  }\n\n  // Fetching data from unsplash API\n  onSearchSubmit = (searchText) => {\n    this.setState({ searchText: searchText });\n\n    fetch(\n      \"https://api.unsplash.com/search/photos?page=\" +\n        this.state.page +\n        \"&per_page=50&query=\" +\n        searchText +\n        \"&client_id=\" +\n        apiKey\n    )\n      .then((res) => res.json())\n      .then(\n        (response) => {\n          this.setState({\n            images: this.state.images.concat(response.results),\n            loading: false,\n            totalPages: response.total_pages,\n            searchText: searchText,\n          });\n        },\n        (error) => {\n          this.setState({ loading: false, error: error });\n          console.log(error);\n        }\n      );\n  };\n\n  increasePageNumber = () => {\n    if (this.state.page >= this.state.totalPages) {\n      return;\n    }\n    this.setState({ page: this.state.page + 1 });\n  };\n\n  reset = () => {\n    this.setState({ page: 1, totalPages: 1, images: [], loading: true });\n  };\n\n  componentDidMount() {\n    this.onSearchSubmit(this.state.searchText);\n  }\n\n  render() {\n    if (this.state.error) {\n      return <div>Errors: {this.error.message}</div>;\n    } else if (this.state.loading) {\n      return (\n        <div>\n          <Loading />\n        </div>\n      );\n    } else {\n      return (\n        <div className=\"container-grad\">\n          <InfiniteScroll\n            dataLength={this.state.images.length}\n            next={() => {\n              this.increasePageNumber();\n              this.onSearchSubmit(this.state.searchText);\n            }}\n            hasMore={this.state.page < this.state.totalPages}\n            loader={<Loading />}\n          >\n            <Search search={this.onSearchSubmit} reset={this.reset} />\n            <div className=\"container-white\">\n              <QueriesList\n                searchQueries={this.onSearchSubmit}\n                reset={this.reset}\n              />\n              <ImagesList foundImages={this.state.images} />\n            </div>\n          </InfiniteScroll>\n        </div>\n      );\n    }\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { ADD_QUERY, DELETE_QUERY } from \"../actions/actions\";\r\n\r\nconst initState = {\r\n  queries: [\r\n  ],\r\n};\r\n\r\nexport const rootReducer = (state = initState, action) => {\r\n  switch (action.type) {\r\n    case ADD_QUERY:\r\n      if (\r\n        state.queries.filter((query) => query.title === action.title).length >\r\n        0 || !action.title\r\n      ) {\r\n        return state;\r\n      }\r\n      return {\r\n        ...state,\r\n        queries: state.queries.concat({ title: action.title }),\r\n      };\r\n    case DELETE_QUERY:\r\n      return {\r\n        queries: state.queries.filter(\r\n          (query) => query.title !== action.payload\r\n        ),\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default rootReducer;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { createStore } from \"redux\";\nimport { Provider } from \"react-redux\";\nimport rootReducer from \"./reducers/rootReducer\";\n\nconst store = createStore(rootReducer);\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}